面向对象的设计原则
      对于面向对象软件系统的设计而言，在支持可维护性的同时，
提高系统的可复用性是一个至关重要的问题，如何同时提高一个软
件系统的可维护性和可复用性是面向对象设计需要解决的核心问题
之一。
     在面向对象设计中，可维护性的复用是以设计原则为基础的。每
一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一
个软件结构的设计水平。

      面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在
很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面
向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指
标之一，
在设计模式的学习中，大家经常会看到诸如“XXX模式符合XXX原则”
、“XXX模式违反了XXX原则”这样的语句。

创建型设计模式
        建造者模式又称为生成器模式，它是一种较为复杂、使用频率也相对较
低的创建型模式。建造者模式为客户端返回的不是一个简单的产品，而
是一个由多个部件组成的复杂产品。
        没有人买车会只买一个轮胎或者方向盘，大家买的都是一辆包含轮胎、
方向盘和发动机等多个部件的完整汽车。如何将这些部件组装成一辆完
整的汽车并返回给用户，这是建造者模式需要解决的问题。


结构型设计模式
      讨论的是类和对象的结构，他用继承的机制来组合接口实现，或者通过
组合一些对象，从而实现新功能。
适配器模式：
       在算法库的设计中就是采用的这种模式，不同的数据类型比如链表数组
都可以使用sort算法实现快排。



行为设计模式
      解决类实体之间的通讯关系，希望以面型对象的方式描述一个而控制流程。
迭代子模式
提供一个iterator顺序访问一个而对象中的元素但不暴露对象的内部表示


单例模式
将构造器私有化，避免其他程序过多的建立该对象

windows的资源管理器就是通过这个实现